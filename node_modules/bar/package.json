{
  "_args": [
    [
      {
        "raw": "bar",
        "scope": null,
        "escapedName": "bar",
        "name": "bar",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/alejandropenacaicedo/Desktop/People"
    ]
  ],
  "_from": "bar@latest",
  "_id": "bar@0.1.2",
  "_inCache": true,
  "_location": "/bar",
  "_npmUser": {
    "name": "fedor.indutny",
    "email": "fedor.indutny@gmail.com"
  },
  "_npmVersion": "1.2.3",
  "_phantomChildren": {
    "wordwrap": "0.0.3"
  },
  "_requested": {
    "raw": "bar",
    "scope": null,
    "escapedName": "bar",
    "name": "bar",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/bar/-/bar-0.1.2.tgz",
  "_shasum": "ec36d80c5fea1111fe1e32c9db38a61053225155",
  "_shrinkwrap": null,
  "_spec": "bar",
  "_where": "/Users/alejandropenacaicedo/Desktop/People",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor.indutny@gmail.com"
  },
  "bin": {
    "node-bar": "./bin/bar"
  },
  "bugs": {
    "url": "https://github.com/indutny/bar/issues"
  },
  "dependencies": {
    "optimist": "~ 0.2.4",
    "watch": "~ 0.3.2"
  },
  "description": "Node.js framework for building large modular web applications",
  "devDependencies": {
    "vows": "~0.7.0"
  },
  "directories": {},
  "dist": {
    "shasum": "ec36d80c5fea1111fe1e32c9db38a61053225155",
    "tarball": "https://registry.npmjs.org/bar/-/bar-0.1.2.tgz"
  },
  "homepage": "https://github.com/indutny/bar",
  "license": "MIT",
  "main": "./lib/bar",
  "maintainers": [
    {
      "name": "fedor.indutny",
      "email": "fedor.indutny@gmail.com"
    }
  ],
  "name": "bar",
  "optionalDependencies": {},
  "readme": "# Node.js Bar\n\n<img src=\"https://raw.github.com/indutny/bar/master/bar.jpg\" />\n\n*Http-server goes into a bar*\n\n# What is Node.js Bar?\n\nNode.js Bar is a [node.js](http://node.js.org) framework for building large modular web applications.\n\n# How does it work?\n\n**Bar** can be run in any folder, all javascript files in that folder will be transformed to **drinkers** and then runned as a part of Node.js Bar. Bar have a **pool** full of drinks. Every drinker has a **pint** which is a merely the same thing as a **pool**, but smaller and with local features.\nSo in, basically, **pint** and **pool** are both the same [EventEmitter2](https://github.com/hij1nx/EventEmitter2) instance. Because of that, drinkers can communicate with each other by **emitting** and **listening** events.\nAt any time drinker can leave and enter **Bar**. That process is essentially the same as the **Module autoreload** process.\n\n## Where can I run Bar?\n\nAs I said before, **Bar** can be run at any folder. You only need to have it installed globally using [npm](https://github.com/isaacs/npm)\n\n# Installation\n\n```\n[sudo] npm install bar -g\n```\n\n# Documentation\n\n## Drinker API\n\nEvery drinker can access **pool** methods: `on`, `emit`, `addListener`, `removeListener` and etc. They're exposed to global context (*Drinkers are running in separate contexts*).\n\n```javascript\non('some-event', function() {\n});\n\nemit('some-event', someData = {a: 1});\n```\n\nAlso `name`, `hook`, `snap` methods are exposed to global context.\n\n## Name\n\nEvery drinker should introduce itself by calling `name`. Only letters, digits, underscores and hyphens can be used for a Drinker's name.\n\n```javascript\nname('your-drinker-name');\n```\n\n## Drinker events\n\nAt any time, when drinker's code was changed - Bar will immediately emit `leave.${drinker.name}` event and create new drinker to replace old one. All event handlers attached to Bar's **pool** will be removed before that.\n\n```javascript\nname('drinker-name');\n\non('leave.drinker-name', function() {\n  // This method should act like destructor and detach/remove all data\n  // Close all file descriptors opened by Drinker and etc.\n});\n```\n\n## Hook&Snap\n\nThere're two method for building persistent relationships between two Drinkers: `hook` and `snap`. `snap` will pass arguments to `hook` callback regardless of the order in which they were called.\n\n```javascript\nname('hook');\n\nhook('beer', function(from, amount) {\n  // Do something with {amount} of beer\n});\n```\n\n```javascript\nname('snap');\n\nsnap('beer', 'Bob Smith', 10);\n```\n\nYou should use `hook` and `snap` pattern to share objects between multiple drinkers.\n\n## More info\n\nTo find more info look at examples.\n\n#### Author: [Fedor Indutny](http://indutny.com/)\n\n\n## Credits\n\nImage by [Creatunco](http://creatunco.deviantart.com/)\n\n#### LICENSE\n\nThis software is licensed under the MIT License.\n\nCopyright Fedor Indutny, 2013.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/indutny/bar.git"
  },
  "scripts": {
    "test": "vows --spec tests/*-test.js"
  },
  "version": "0.1.2"
}
